问题描述:
http://review.source.unisoc.com/gerrit/#/c/540604
............
http://review.source.unisoc.com/gerrit/#/c/540612






[ 2320.848255] Warning: sprd_dbg: irqsoff: Process 274 detected Process 1368 disable preempt 416.172806ms from 2320.432074301s
[ 2320.848263] Warning: sprd_dbg: disable at:
[ 2320.848277] [<ffffff800899909c>] schedule+0x70/0x94
[ 2320.848282] [<ffffff800899909c>] schedule+0x70/0x94
[ 2320.848290] CPU: 0 PID: 274 Comm: ylog.rdsgm.cpu_ Tainted: G S      W  O    4.14.78+ #2
[ 2320.848293] Hardware name: Unisoc UMS510 1H10 board (DT)
[ 2320.848296] Call trace:
[ 2320.848302] [<ffffff800808a754>] dump_backtrace+0x0/0x254
[ 2320.848307] [<ffffff800808a9c8>] show_stack+0x20/0x28
[ 2320.848314] [<ffffff800898362c>] dump_stack+0xb4/0xf0
[ 2320.848320] [<ffffff8008484d24>] stop_epreempt_timing+0x11c/0x13c
[ 2320.848327] [<ffffff800817e774>] trace_preempt_on+0x20/0x128
[ 2320.848333] [<ffffff80080d784c>] preempt_count_sub+0x6c/0x8c
[ 2320.848337] [<ffffff80089990ac>] schedule+0x80/0x94
[ 2320.848343] [<ffffff800899ce44>] schedule_hrtimeout_range_clock+0x60/0x108
[ 2320.848346] [<ffffff800899cf20>] schedule_hrtimeout_range+0x34/0x40
[ 2320.848353] [<ffffff800823d130>] poll_schedule_timeout+0x60/0x90
[ 2320.848356] [<ffffff800823e178>] do_sys_poll+0x348/0x478
[ 2320.848360] [<ffffff800823ede8>] SyS_ppoll+0x15c/0x210
[ 2320.848364] Exception stack(0xffffff800e48bec0 to 0xffffff800e48c000)
[ 2320.848368] bec0: 0000005a8c798d60 0000000000000020 0000000000000000 0000000000000000
[ 2320.848371] bee0: 0000000000000000 00000074f280d6f8 393139332c302c30 3133322c302c322c
[ 2320.848375] bf00: 0000000000000049 00000000ffffffff 0000000000b3c679 0a302c302c302c30
[ 2320.848379] bf20: 2c302c302c302c30 2c302c302c302c30 00000000ffffffff 00000074f1912ed8
[ 2320.848383] bf40: 00000074fa2f2c10 00000074fa22e5f0 00000074f191295a 0000000000000020
[ 2320.848387] bf60: 0000005a8c798d60 0000000000000000 00000074f1915588 0000000000000006
[ 2320.848391] bf80: 0000005a8c702b40 000000000000005c 00000000ffffffff 0000005a8c7d5088
[ 2320.848396] bfa0: 00000000ffffffff 00000074f1915330 00000074fa22e64c 00000074f19152f0
[ 2320.848400] bfc0: 00000074fa272730 0000000060000000 0000005a8c798d60 0000000000000049
[ 2320.848404] bfe0: 0000000000000000 0000000000000000 0000000000000000 0000000000000000
[ 2320.848409] [<ffffff80080832c0>] el0_svc_naked+0x34/0x38


分析如下:
今天再次check了下,确定是cpu在idle情况下是处于禁止抢占状态的.分析如下:
kernel4.14与kernel4.4的区别是: 进入idle.处于禁止抢占状态(由于idle线程调用的是__schedule()函数,不会走禁止/开启抢占的流程.而是只要切换到idle线程,就处于禁止抢占状态.kernel4.4会做禁止抢占/开启抢占/再次禁止抢占才进入idle状态.)

kernel4.14-sharkL5

 9007     ┊   ┊ <idle>-0     [000] .n.1   135.911975: schedule_idle: enter_schedule_idle: preempt_count=1    //idle loop退出,开始执行schedule_idle,抢占计数器依然为1.处于静止抢占状态.并调用__schedule()函数进行进程调度.
 9008     ┊   ┊ <idle>-0     [000] .n.1   135.911976: __schedule: __schedule_1 prev=swapper/0,prev_pid=0,preempt=0,preempt_count=1
 9009     ┊   ┊ <idle>-0     [000] d..2   135.911979: sched_switch: prev_comm=swapper/0 prev_pid=0 prev_prio=120 prev_state=S ==> next_comm=ylog.mbdefault/ next_pid=270 next_prio=120
 9010  ylog.mbdefault/-270   [000] ...1   135.911985: __schedule: __schedule_2 prev=ylog.mbdefault/,prev_pid=270,next=swapper/0,next_pid=0,preempt_count=1
 9011  ylog.mbdefault/-270   [000] ...1   135.911987: schedule: __schedule func 1000.073342ms
 9012  ylog.mbdefault/-270   [000] ....   135.911988: schedule: sched_preempt_enable_no_resched func 0.001693ms
 9013  ylog.mbdefault/-270   [000] ....   135.911989: schedule: sched_preempt_enable_no_resched func preempt_count=0    //切换到此进程的时候会enable抢占.
 9014  ylog.mbdefault/-270   [000] ....   135.912009: schedule: start disable: preempt_count()=0    //线程 ylog.mbdefault/-270执行完毕,开始进程调度切换,cpu0进入idle
 9015  ylog.mbdefault/-270   [000] ...1   135.912011: schedule: preempt_disable func time=0.001347ms
 9016  ylog.mbdefault/-270   [000] ...1   135.912013: __schedule: __schedule_1 prev=ylog.mbdefault/,prev_pid=270,preempt=0,preempt_count=1   //禁止抢占
 9017  ylog.mbdefault/-270   [000] d..2   135.912017: sched_switch: prev_comm=ylog.mbdefault/ prev_pid=270 prev_prio=120 prev_state=D ==> next_comm=swapper/0 next_pid=0 next_prio=120
 9018     ┊   ┊ <idle>-0     [000] ...1   135.912020: __schedule: __schedule_2 prev=swapper/0,prev_pid=0,next=ylog.mbdefault/,next_pid=270,preempt_count=1
 9019     ┊   ┊ <idle>-0     [000] ...1   135.912021: schedule_idle: exit_schedule_idle: preempt_count=1   //进入idle.处于禁止抢占状态(由于idle线程调用的是__schedule()函数,不会走禁止/开启抢占的流程.而是只要切换到idle线程,就处于禁止抢占状态.kernel4.4多做禁止抢占/开启抢占/再次禁止抢占才进入idle状态.)
 9020     ┊   ┊ <idle>-0     [000] .n.1   135.916446: schedule_idle: enter_schedule_idle: preempt_count=1                                                                                                     
void __sched schedule_idle(void)
{
	/*
	 * As this skips calling sched_submit_work(), which the idle task does
	 * regardless because that function is a nop when the task is in a
	 * TASK_RUNNING state, make sure this isn't used someplace that the
	 * current task can be in any other state. Note, idle is always in the
	 * TASK_RUNNING state.
	 */
	WARN_ON_ONCE(current->state);
	trace_printk("enter_schedule_idle: preempt_count=%d\n",preempt_count());
	do {
		__schedule(false);
	} while (need_resched());
	trace_printk("exit_schedule_idle: preempt_count=%d\n",preempt_count());
}

kernel4.4-sharkL3


18768     ┊   ┊ <idle>-0     [000] .n.1   110.075543: schedule_preempt_disabled: enter schedule_preempt_disabled: preempt_count=1   //idle loop退出之前还是禁止抢占状态,退出之后enable抢占
18769     ┊   ┊ <idle>-0     [000] .n..   110.075547: schedule: start disable: preempt_count()=0    //idle线程切换到f2fs_discard-25-280线程
18770     ┊   ┊ <idle>-0     [000] .n.1   110.075563: __schedule: __schedule_1 prev=swapper/0,prev_pid=0,preempt=1,preempt_count=1
18771     ┊   ┊ <idle>-0     [000] d..3   110.075572: sched_switch: prev_comm=swapper/0 prev_pid=0 prev_prio=120 prev_state=R+ ==> next_comm=f2fs_discard-25 next_pid=280 next_prio=120
18772  f2fs_discard-25-280   [000] ...1   110.075578: __schedule: __schedule_2 prev=f2fs_discard-25,prev_pid=280,next=swapper/0,next_pid=0,preempt_count=1
18773  f2fs_discard-25-280   [000] ...1   110.075587: schedule: __schedule func 51.908846ms                                                                                                                  
18774  f2fs_discard-25-280   [000] ....   110.075590: schedule: sched_preempt_enable_no_resched func 0.003038ms
18775  f2fs_discard-25-280   [000] ....   110.075592: schedule: sched_preempt_enable_no_resched func preempt_count=0
18776  f2fs_discard-25-280   [000] ....   110.075681: schedule: start disable: preempt_count()=0       //切换到idle线程
18777  f2fs_discard-25-280   [000] ...1   110.075683: schedule: preempt_disable func time=0.002424ms
18778  f2fs_discard-25-280   [000] ...1   110.075687: __schedule: __schedule_1 prev=f2fs_discard-25,prev_pid=280,preempt=0,preempt_count=1
18779  f2fs_discard-25-280   [000] d..3   110.075718: sched_switch: prev_comm=f2fs_discard-25 prev_pid=280 prev_prio=120 prev_state=S ==> next_comm=swapper/0 next_pid=0 next_prio=120
18780     ┊   ┊ <idle>-0     [000] ...1   110.075734: __schedule: __schedule_2 prev=swapper/0,prev_pid=0,next=f2fs_discard-25,next_pid=280,preempt_count=1
18781     ┊   ┊ <idle>-0     [000] ...1   110.075737: schedule: preempt_disable func time=0.189846ms
18782     ┊   ┊ <idle>-0     [000] ...1   110.075740: __schedule: __schedule_1 prev=swapper/0,prev_pid=0,preempt=0,preempt_count=1
18783     ┊   ┊ <idle>-0     [000] ...1   110.075757: __schedule: __schedule_2 prev=swapper/0,prev_pid=0,next=swapper/0,next_pid=0,preempt_count=1
18784     ┊   ┊ <idle>-0     [000] ...1   110.075759: schedule: __schedule func 0.022269ms
18785     ┊   ┊ <idle>-0     [000] ....   110.075772: schedule: sched_preempt_enable_no_resched func 0.013193ms
18786     ┊   ┊ <idle>-0     [000] ....   110.075774: schedule: sched_preempt_enable_no_resched func preempt_count=0  //由于idle线程调用的时候schedule()函数,退出此函数会enable抢占
18787     ┊   ┊ <idle>-0     [000] ...1   110.075776: schedule_preempt_disabled: exit schedule_preempt_disabled: preempt_count=1   //进入idle,禁止抢占
18788     ┊   ┊ <idle>-0     [000] .n.1   110.127546: schedule_preempt_disabled: enter schedule_preempt_disabled: preempt_count=1  //退出idle.

/**
 * schedule_preempt_disabled - called with preemption disabled
 *
 * Returns with preemption disabled. Note: preempt_count must be 1
 */
void __sched schedule_preempt_disabled(void)
{

    	trace_printk("enter schedule_preempt_disabled: preempt_count=%d\n",preempt_count());
	sched_preempt_enable_no_resched();  //退出idle启用抢占.
	schedule();  //idle切换到其他线程执行.
	preempt_disable();//进入idle禁止抢占.
    	trace_printk("exit schedule_preempt_disabled: preempt_count=%d\n",preempt_count());
}

